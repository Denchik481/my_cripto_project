name: CI/CD


on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: List containers before build
        run: docker ps -a
      - name: List images before build
        run: docker images
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build custom MinIO image
        run: docker build -t my-minio-custom:latest ./docker/minio
      - name: List Docker images
        run: docker images

      - name: Remove old MinIO container (if exists)
        run: docker rm -f minio || true

      - name: Run MinIO container
        run: |
          docker run -d --name minio \
            -p 9000:9000 -p 9001:9001 \
            -e MINIO_ROOT_USER=minioadmin \
            -e MINIO_ROOT_PASSWORD=minioadmin \
            my-minio-custom:latest server /data --console-address :9001
          for i in {1..10}; do
            if curl -f http://localhost:9000/minio/health/live; then
              echo "MinIO is up!"
              break
            fi
            echo "Waiting for MinIO..."
            sleep 3
          done
      - name: List Docker images and containers
        run: |
          docker images
          docker ps -a

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install --no-root

      - name: Lint with flake8
        run: poetry run flake8 src/ pipelines/ tests/

      - name: Check formatting with black
        run: poetry run black --check src/ pipelines/ tests/

      - name: Run tests with pytest
        run: poetry run pytest --cov=src --cov=pipelines --cov-report=xml

      - name: Build Spark Docker image
        run: docker build -t my-spark-custom:latest docker/spark

      - name: Build Jupyter Docker image
        run: docker build -t my-crypto-jupyter:latest docker/jupyter

      - name: Install DVC
        run: poetry run pip install dvc

      - name: DVC status
        run: poetry run dvc status

      - name: Poetry check
        run: poetry check

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}